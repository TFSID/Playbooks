---
import DashboardLayout from "../layouts/DashboardLayout.astro";
---

<DashboardLayout title="SOC Playbooks - Scanners" pageTitle="Scanners">
  <div class="card">
    <div class="card-header">Scanner Tools</div>
    <div class="card-body">
      <h5 class="card-title">Available Scanners</h5>
      <p class="card-text">
        Select a scanner to begin your security assessment.
      </p>
      <h5 class="card-title">Target Domain</h5>
      <div class="domain-input-container position-relative mb-3">
        <input 
          style="height: 3rem;" 
          class="card col-md-4 w-100" 
          name="target_domain" 
          type="text" 
          placeholder="e.g examples.com"
          onclick="handleDomainInputClick(this)"
        />
        <div id="domain-suggestions" class="domain-suggestions d-none"></div>
        <small id="domain-feedback" class="form-text text-muted mt-1"></small>
      </div>
      <div class="row mt-4">
        <div class="col-md-4 mb-3">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title">Nuclei Scanner</h5>
              <p class="card-text">
                Scan for known vulnerabilities in your systems.
              </p>
              <button onclick="selectScanner('nuclei')" class="btn btn-primary">Launch Scanner</button>
            </div>
          </div>
        </div>

        <div class="col-md-4 mb-3">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title">Dirsearch Scanner</h5>
              <p class="card-text">Finding Directories/API From Endpoints.</p>
              <br>
              <button onclick="selectScanner('dirsearch')" class="btn btn-primary">Launch Scanner</button>
            </div>
          </div>
        </div>

        <div class="col-md-4 mb-3">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title">Subdomain Finder + HTTPX</h5>
              <p class="card-text">
                Finds Active Subdomains with subfinder and HTTPX combinations.
              </p>
              <button onclick="selectScanner('subdomain')" class="btn btn-primary">Launch Scanner</button>
            </div>
          </div>
        </div>

        <div class="col-md-4 mb-3">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title">Get IP From Domain</h5>
              <p class="card-text">
                Discover IP Address from the target domain.
              </p>
              <button onclick="selectScanner('ip')" class="btn btn-primary">Launch Scanner</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>

<style>
  .domain-input-active {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    border-color: #86b7fe;
  }
  
  .domain-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    z-index: 1000;
    max-height: 200px;
    overflow-y: auto;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .domain-suggestion {
    cursor: pointer;
    padding: 0.5rem;
    border-bottom: 1px solid #efefef;
  }
  
  .domain-suggestion:hover {
    background-color: #f8f9fa;
  }
</style>

<script is:inline>
  // Function to handle the input click
  function handleDomainInputClick(inputElement) {
    // Visual feedback when clicked
    inputElement.classList.add('domain-input-active');
    
    // Clear any previous validation messages
    const feedbackElement = document.getElementById('domain-feedback');
    if (feedbackElement) {
      feedbackElement.textContent = '';
    }
    
    // Show recent domains or suggestions if available
    const suggestions = getRecentDomains();
    const suggestionsElement = document.getElementById('domain-suggestions');
    
    if (suggestions.length > 0) {
      suggestionsElement.innerHTML = '';
      suggestions.forEach(domain => {
        const suggestion = document.createElement('div');
        suggestion.className = 'domain-suggestion';
        suggestion.textContent = domain;
        suggestion.onclick = function(e) {
          e.stopPropagation(); // Prevent triggering input's onclick again
          inputElement.value = domain;
          suggestionsElement.classList.add('d-none');
        };
        suggestionsElement.appendChild(suggestion);
      });
      suggestionsElement.classList.remove('d-none');
    }
    
    // Optional: Focus the input
    inputElement.focus();
  }
  
  // Function to get recent domains (could be from localStorage or other source)
  function getRecentDomains() {
    // In a real application, you might get this from localStorage or an API
    const storedDomains = localStorage.getItem('recentDomains');
    if (storedDomains) {
      return JSON.parse(storedDomains);
    }
    return []; // Return empty array if no recent domains
  }
  
  // Function to save a domain to recent domains
  function saveDomain(domain) {
    if (!domain) return;
    
    let recentDomains = getRecentDomains();
    // Add to beginning of array and remove duplicates
    recentDomains = [domain, ...recentDomains.filter(d => d !== domain)];
    // Keep only the most recent 5 domains
    recentDomains = recentDomains.slice(0, 5);
    
    localStorage.setItem('recentDomains', JSON.stringify(recentDomains));
    return recentDomains;
  }
  
  // Function to validate domain format
  function validateDomain(domain) {
    // Simple domain validation regex
    const domainRegex = /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/;
    return domainRegex.test(domain);
  }
  
  // Close suggestions when clicking outside
  document.addEventListener('click', function(e) {
    const suggestionsElement = document.getElementById('domain-suggestions');
    const domainInputs = document.querySelectorAll('.domain-input-container input');
    
    let clickedInside = false;
    domainInputs.forEach(input => {
      if (input.contains(e.target)) {
        clickedInside = true;
      }
    });
    
    if (!clickedInside && suggestionsElement && !suggestionsElement.contains(e.target)) {
      suggestionsElement.classList.add('d-none');
      domainInputs.forEach(input => {
        input.classList.remove('domain-input-active');
      });
    }
  });
  
  // Handle scanner selection
  function selectScanner(scannerType) {
    const domainInput = document.querySelector('input[name="target_domain"]');
    const domain = domainInput.value.trim();
    
    if (!domain) {
      alert('Please enter a target domain first');
      domainInput.focus();
      return;
    }
    
    if (!validateDomain(domain)) {
      alert('Please enter a valid domain');
      domainInput.focus();
      return;
    }
    
    // Save domain to recent domains
    saveDomain(domain);
    
    // Here you would typically initiate the specific scanner
    console.log(`Starting ${scannerType} scan for domain:`, domain);
    alert(`Starting ${scannerType} scan for ${domain}`);
    
    // You could redirect to a results page or show a loading indicator here
    const feedbackElement = document.getElementById('domain-feedback');
    if (feedbackElement) {
      feedbackElement.textContent = `Scan initiated: ${scannerType} on ${domain}`;
      feedbackElement.className = 'form-text text-success mt-1';
    }
  }
</script>

